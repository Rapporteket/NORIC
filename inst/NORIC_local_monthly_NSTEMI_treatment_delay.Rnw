% knitr::knit2pdf("NORIC_local_monthly_NSTEMI_treatment_delay.Rnw")

\documentclass[presentation,xcolor=pdftex,dvipsnames,table]{beamer}
\usetheme{Hannover}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[english, norsk]{babel}
\usepackage{xspace}
\usepackage{booktabs}
\usepackage{rotating}


<<knitrOptions,include=FALSE>>=

knitr::opts_knit$set(root.dir='./')

knitr::opts_chunk$set(
    fig.path = '' ,
    warnings = FALSE ,
    errors = FALSE ,
    messages = FALSE ,
    dev = c('pdf','bmp') ,
    dpi = 200 ,
    echo = FALSE )

options(
    stringsAsFactors = FALSE ,
    width = "130")


# load functions
require(mgcv)
require(quantreg)
require(Hmisc)
require(xtable)


############ Begin Define Functions #######################

DescriptionFunctions <- c(
    list(
        N = function(x) sum(!is.na(x)) 
    ) ,
    lapply(
        c(0.25,0.50,0.75) ,
        function(p) function(x) round( quantile( x , na.rm = TRUE , probs = p ) , digits = 1 ))
    )

describe <- function(x) unlist(lapply( DescriptionFunctions , function(f) f(x)) )


DelayPerMonth <- function(
                                 days = "DaysFromIndexAdmissionToProcedure" ,
                                 status = "Alle" ,
                                 data = NSTEMI
                                 ) {
    i.status <- if (status %in% c("Direkte" , "Overflyttet")) {
                    which( data$HenvisningsStatus == status ) 
                } else {
                    TRUE
                }
    LIST <- lapply(
        X = with(
            data = data[ i.status , ] ,
            expr = split(
                x = get(days) ,
                f = Month )
        ) ,
        FUN = describe
    )
    TAB <- t( as.data.frame( LIST ))
    rownames(TAB) = levels( data$Month )
    return(TAB)
}



qgam <- function( tau )
    rqss(
        DaysFromIndexAdmissionToProcedure ~ qss(
            x = Day ,
            lambda = 300 ) ,
        tau = tau ,
        data = na.exclude(
            NSTEMI[
                  ,
                   c(
                       "DaysFromIndexAdmissionToProcedure" ,
                       "Day" )]))

get.qss <- function(model){
    fit <- model$qss$Day$xyz
    fit[,2] <- fit[,2] + model$coef[1]
    return(fit)}




plot.qgam <- function(model){
    
                                        ### create a Matrix of predicted quantiles for plotting
    
    DxD <- lapply(
        c(0.25,0.50,0.75) ,
        function(x) get.qss( qgam( x ))
    )

    par( mar = c(5,4,2,4) , las = 1)
    
    plot(
        0 ,
        xlim = c(0,730) ,
        ylim = c(0,13) ,
        type = "n" ,
        bty = "n" ,
        xlab = "Month of Procedure" ,
        ylab = "Days from Index Admission to Procedure" ,
        main = "" ,
        axes = FALSE)
        
    axis(
        side = 1 ,
        tick = FALSE ,
        at = 365/24*( 2*1:24 - 1 ) ,
        labels = c(1:12,1:12) )
    
    axis(
        side = 2 )
    
    segments(
        x0 = 365/12*0:24 ,
        y0 = 0 ,
        x1 = 365/12*0:24 ,
        y1 = 8 ,
        lty = 3 ,
        lwd = 0.8 ,
        col = "#80808080")
    
    abline(
        h = 0:8 ,
        lty = 3 ,
        lwd = 0.8 ,
        col = "#80808080")
    
    abline(
        h = 3 ,
        v = c(0,365,730) ,
        lty = 3 ,
        lwd = 2 ,
        col = "#80808080")
    
    
    points(
        jitter(DaysFromIndexAdmissionToProcedure) ~ Day ,
        data = NSTEMI ,
        pch = 16 ,
        col = "#A0A0A030")
    
    
    lines( sm.spline(get.qss( fit.rqss( tau = 0.75 , lambda = 50)) , df = 18 ) , lwd = 5 , col = "#FFFFFFAA")
    lines( sm.spline(get.qss( fit.rqss( tau = 0.50 , lambda = 50)) , df = 18 ) , lwd = 5 , col = "#FFFFFFAA")
    lines( sm.spline(get.qss( fit.rqss( tau = 0.25 , lambda = 50)) , df = 18 ) , lwd = 5 , col = "#FFFFFFAA")
    
    
    lines( sm.spline(get.qss( fit.rqss( tau = 0.75 , lambda = 30 )) , df = 18 ) , lwd = 3 , col = "#A0A0A0AA")
    lines( sm.spline(get.qss( fit.rqss( tau = 0.50 , lambda = 30 )) , df = 18 ) , lwd = 3 , col = "#A0A0A0AA")
    lines( sm.spline(get.qss( fit.rqss( tau = 0.25 , lambda = 30 )) , df = 18 ) , lwd = 3 , col = "#A0A0A0AA")
    
    legend(
        x = 400 ,
        y = 13 ,
        bty = "n" ,
        lwd = 5 ,
        col = c("#A0C0F0AA","#A0A0A0AA") ,
        legend = c("Number of NSTEMI per month (right scale)" , "25-, 50-, 75-Percentile (left scale)" ))
}


BarplotTable <- function( TabN , sort.level = 0 ){
    pal <- RColorBrewer::brewer.pal(
                             n = nrow( TabN ) ,
                             name = "Blues" )
    par(
        mar = c(2,3,1,12) ,
        xpd = NA ,
        las = 1)
    TabR <- 100 * prop.table(
                      x = TabN ,
                      margin = 2 )
    AnnotateN <- function(row) text(
                                   x = xBarplot ,
                                   y = if( row == 1 ) TabR[ 1 ,] else colSums(TabR[ 1:row ,]) ,
                                   pos = 1 ,
                                   col = "#000000AA" ,
                                   labels = TabN[ row ,])
    if (sort.level %in% (1:nrow(TabR))) {
        col.index <- order( TabR[ sort.level , ] )
        TabN <- TabN[ , col.index ]
        TabR <- TabR[ , col.index ]
    }
    xBarplot <- barplot(
        TabR ,
        beside = FALSE ,
        horiz = FALSE ,
        axisnames = TRUE ,
        xlab = "" ,
        col = pal )
    lapply(
        1 : nrow( TabR ) ,
        AnnotateN
    )
    legend(
        x = par("usr")[2] ,
        y = par("usr")[4]*.7 ,
        bty = "n" ,
        title = "Timer" ,
        legend = rownames(TabN)[ nrow(TabN):1 ],
        fill = pal[ nrow(TabN):1 ] )
}



BarplotTable <- function( TabN , sort.level = 0 , horiz = FALSE ){
    pal <- RColorBrewer::brewer.pal(
                             n = nrow( TabN ) ,
                             name = "Blues" )
    par(
        mar = if (horiz) c(2,12,1,12) else c(2,3,1,12) ,
        xpd = NA ,
        las = 1)
    TabR <- 100 * prop.table(
                      x = TabN ,
                      margin = 2 )
    AnnotateVertical <- function(row) text(
                                          x = xBarplot ,
                                          y = if( row == 1 ) TabR[ 1 ,] else colSums(TabR[ 1:row ,]) ,
                                          pos = 1 ,
                                          col = "#000000AA" ,
                                          labels = TabN[ row ,])
    AnnotateHorizontal <- function(row) text(
                                            x = if( row == 1 ) TabR[ 1 ,] else colSums(TabR[ 1:row ,]) ,
                                            y = xBarplot ,
                                            pos = 2 ,
                                            col = "#000000AA" ,
                                            labels = TabN[ row ,])
    if (sort.level %in% (1:nrow(TabR))) {
        col.index <- order( TabR[ sort.level , ] )
        TabN <- TabN[ , col.index ]
        TabR <- TabR[ , col.index ]
    }
    xBarplot <- barplot(
        TabR ,
        beside = FALSE ,
        horiz = horiz ,
        axisnames = TRUE ,
        xlab = "" , ylab = "" ,
        col = pal
    )
    if (horiz) {
        lapply(
            1 : nrow( TabR ) ,
            AnnotateHorizontal
        )
        } else {
        lapply(
            1 : nrow( TabR ) ,
            AnnotateVertical
        )
        }
    legend(
        x = par("usr")[2] ,
        y = par("usr")[4]*.7 ,
        bty = "n" ,
        title = "Timer" ,
        legend = rownames(TabN)[ nrow(TabN):1 ],
        fill = pal[ nrow(TabN):1 ]
    )
}


############ End Define Functions #######################



############ SKDE colors ################################
colPrimary <- c("#000059", "#084594", "#2171b5", "#4292c6", "#6baed6", "#c6dbef")
colNeutral <- c("#4D4D4D", "#737373", "#A6A6A6", "#DADADA")
colKontrast <- "#FF7260"
############ SKDE colors ################################


    
############ Load Data ##################################
if ( exists( "reshID" ) ) {
    baseName <- "noricStaging"
    registryName <- noric::NORICmakeRegistryName(baseName, reshID)
    AP <- rapbase::LoadRegData(
        registryName = registryName ,
        query = "SELECT * FROM AngioPCIVar" ,
        dbType = "mysql")
} else {
#    load("../data/noric_staging.Rd")
    load("/home/r/Documents/NORIC/data/Rdata/APtime-2016-10-24.Rd")
    AP <- subset( APtime , Sykehusnavn == "Haukeland" )
}
############ Load Data ##################################


AP$HenvisningsStatus <- car::recode(
    var = AP$OverflyttetFra ,
    recodes = "
        'Annet sykehus'='Overflyttet';
        'Nei, direkte inn til dette sykehus' = 'Direkte';
        'Omdirigert ambulanse' = 'Direkte';
        else = NA
        ")

AP$Indikasjon2 <- factor(
    car::recode(
        var = AP$Indikasjon ,
        recodes = "
            'Stabil koronarsykdom '='SAP';
            'UAP'='UAP';
            'NSTEMI'='NSTEMI';
            'STEMI'='STEMI';
            'Hjertestans ved STEMI'='STEMI';
            'STEMI > 24h'='STEMI';
            'STEMI/Rescue PCI'='STEMI';
            ' Uklare brystsmerter'='Uklare brystsmerter';
            else='Annet';
            ") ,
    levels = c("Uklare brystsmerter","SAP","UAP","NSTEMI","STEMI","Annet") )


AP$ProsedyreDato <- as.Date( AP$ProsedyreDato)

AP$Year <- as.numeric(
    format(
        x = AP$ProsedyreDato ,
        format = "%Y"))

AP$nMonth <- as.numeric(
    as.factor(
        format(
            AP$ProsedyreDato ,
            format = "%m")))

AP$Day <- as.numeric(
         AP$ProsedyreDato - min( AP$ProsedyreDato , na.rm = TRUE ) )

AP$Month <- as.factor(
    format(
        x = AP$ProsedyreDato ,
        format = "%Y-%m"))

AP$Week <- format(
    x = AP$ProsedyreDato ,
    format = "%Y-%W")

AP$WeekDay <- format(
    x = AP$ProsedyreDato ,
    format = "%a")

AP$WeekDay <- car::recode(
    var = AP$WeekDay ,
    as.factor = TRUE ,
    levels = c("Mån","Tir","Ons","Tor","Fre","Lør","Søn") ,
    recodes = "
        'Mon' = 'Mån' ;
        'Tue' = 'Tir' ;
        'Wed' = 'Ons' ;
        'Thu' = 'Tor' ;
        'Fri' = 'Fre' ;
        'Sat' = 'Lør' ;
        'Sun' = 'Søn'
        ")


AP$InnleggelseHenvisendeSykehusDato <- as.Date( AP$InnleggelseHenvisendeSykehusDato)

AP$AnkomstPCIDato <- as.Date( AP$AnkomstPCIDato)

i.direkte <- which(AP$HenvisningsStatus == "Direkte")
AP$InnleggelseHenvisendeSykehusDato[ i.direkte ] <- AP$AnkomstPCIDato[ i.direkte ]

AP$DaysFromIndexAdmissionToProcedure <- as.numeric( AP$ProsedyreDato - AP$InnleggelseHenvisendeSykehusDato )
AP$DaysFromIndexAdmissionToProcedure[ which( AP$DaysFromIndexAdmissionToProcedure < 0 ) ] <- NA
AP$DaysFromIndexAdmissionToProcedure[ which( AP$DaysFromIndexAdmissionToProcedure > 50 ) ] <- NA

# AP[ 1:10 , c("DaysFromIndexAdmissionToProcedure","ProsedyreDato","InnleggelseHenvisendeSykehusDato","AnkomstPCIDato","HenvisningsStatus")]

AP$DaysFromPCIcenterAdmissionToProcedure <- as.numeric( AP$ProsedyreDato - AP$AnkomstPCIDato )
AP$DaysFromPCIcenterAdmissionToProcedure[ which( AP$DaysFromPCIcenterAdmissionToProcedure < 0 ) ] <- NA
AP$DaysFromPCIcenterAdmissionToProcedure[ which( AP$DaysFromPCIcenterAdmissionToProcedure > 50 ) ] <- NA

AP$DaysFromIndexAdmissionToPCIcenter <- as.numeric(AP$AnkomstPCIDato - AP$InnleggelseHenvisendeSykehusDato )
AP$DaysFromIndexAdmissionToPCIcenter[ which( AP$DaysFromIndexAdmissionToPCIcenter < 0 ) ] <- NA
AP$DaysFromIndexAdmissionToPCIcenter[ which( AP$DaysFromIndexAdmissionToPCIcenter > 50 ) ] <- NA


AP$DelayFromIndexAdmissionToProcedure <- cut(
    x = AP$DaysFromIndexAdmissionToProcedure ,
    breaks = c(0,1,3,50) ,
    labels = c("0-24","25-72",">72") ,
    include.lowest = TRUE
)


## Subsetting only NSTEMI
NSTEMI <- subset(
    x = AP ,
    subset = (Indikasjon == "NSTEMI"))

FromDate <- format( min(NSTEMI$ProsedyreDato,na.rm=TRUE) , format = "%d.%m.%Y") # earliest record in the dataset
ToDate <- format( max(NSTEMI$ProsedyreDato,na.rm=TRUE) , format = "%d.%m.%Y")   # latest record in the dataset
ReportYear <- max( AP$Year , na.rm = TRUE ) # This year
showN <- 18 # how many months in the long tables?
@ 


\title[NSTEMI\\\Sexpr{AP$Sykehusnavn[1]}]{Norsk register for invasiv kardiologi (NORIC)\\ \Sexpr{AP$Sykehusnavn[1]}\\Ventetider ved NSTEMI\\ \Sexpr{paste( FromDate , "--" , ToDate )} }


\begin{document}
\begin{tiny}
  
\maketitle



\section{Oversikt}

\begin{frame}[fragile]
  \frametitle{NSTEMI}
<<Fig-N-HenvisningsStatus,fig.cap="Antall NSTEMI per måned og henvisnings status",fig.width=8,fig.height=4,out.width="\\textwidth">>=

pal <- colPrimary[c(1,3,5)]

op <- par(
    mfcol = c (1,1) ,
    xpd = NA ,
    mar = c(2,3,1,8) ,
    bg = "#EEEEEE")

barplot(
    xtabs(
        formula = ~ HenvisningsStatus + Month ,
        data = NSTEMI) ,
    las = 1 ,
    xlab = "Måned" ,
    ylab = "Antall" ,
    col = pal ,
    space = 0.2 ,
    border = FALSE)

legend(
    "right" ,
    inset = -.28 ,
    bty = "n" ,
    horiz = FALSE ,
    fill = pal[3:1],
    legend = sort(
        unique(AP$HenvisningsStatus) , 
        decreasing = T) ,
    cex = 1)

@
\end{frame}



\begin{frame}[fragile]
    \frametitle{NSTEMI}
    
<<Tab-N-HenvisningsStatus,  results = 'asis'>>=

TabN.HenvisningsStatus <- tail(
    addmargins(
        table(
            NSTEMI$Month ,
            NSTEMI$HenvisningsStatus
        )
    ) ,
    n = showN+1 )

xtable::print.xtable(
    x = xtable::xtable(
        x = TabN.HenvisningsStatus ,
        caption = paste(
            "Antall NSTEMI per måned og henvisnings status - siste" ,
            showN ,
            "måneder er vist") ,
        digits = 0) ,
    booktabs = TRUE )

@   
\end{frame}




\section{Ventetid ved NSTEMI}
\begin{frame}
  \begin{Huge}
    Ventetid ved NSTEMI
  \end{Huge}
  Antall dager fra førstegangs innleggelse etter symptom start til prosedyre
\end{frame}



\begin{frame}[fragile]
    \frametitle{overflyttet + direkte}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<TabVentetid,  results = 'asis'>>=

TabDelay <- tail(
    cbind(
        DelayPerMonth(status = "Direkte") ,
        DelayPerMonth(status = "Overflyttet")
    ) ,
    n = showN )
 
Hmisc::latex(
    object = TabDelay ,
    cgroup = c("Direkte","Overflyttet") ,
    n.cgroup = c(4,4) ,
    booktabs = TRUE,
    table.env = TRUE ,
    col.just = rep("r",length(colnames(TabDelay))) ,
    center = "none" ,
    caption = paste("Ventetid i dager for NSTEMI prosedyrer etter henvisningsstatus over de siste" , showN , "måneder") ,
    title = "",
    file = "")
           

@ 
\end{frame}



\begin{frame}[fragile]
    \frametitle{overflyttet + direkte}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay,fig.cap="Prosentandel NSTEMI i ventetidkategorier over tid",fig.width=14,fig.height=7,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ addNA(DelayFromIndexAdmissionToProcedure) + Month ,
    data = NSTEMI)

rownames(TabNDelay)[4] <- "Mangler"

BarplotTable( TabNDelay )

@ 
\end{frame}




\begin{frame}[fragile]
    \frametitle{overflyttet + direkte}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay-cropped,fig.cap="Prosentandel NSTEMI i ventetidkategorier over tid. Manglende registreringer og de siste to måneder er ekskludert.",fig.width=14,fig.height=7,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ DelayFromIndexAdmissionToProcedure + Month ,
    data = NSTEMI)[ , 1:(length(levels(NSTEMI$Month))-2)]

BarplotTable( TabNDelay )

@ 

\end{frame}





\begin{frame}[fragile]
    \frametitle{overflyttet + direkte}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay-Weekday,fig.cap="Prosentandel NSTEMI i ventetidkategorier per ukedag. Manglende registreringer og de siste to måneder er ekskludert.",fig.width=14,fig.height=7,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ DelayFromIndexAdmissionToProcedure + WeekDay ,
    data = NSTEMI)

BarplotTable( TabNDelay )

@ 

\end{frame}




\subsection{Overflyttet}

\begin{frame}[fragile]
    \frametitle{overflyttet}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay-transferred-cropped,fig.cap="Prosentandel NSTEMI i ventetidkategorier over tid for overflyttede pasienter. Manglende registreringer og de siste to måneder er ekskludert.",fig.width=14,fig.height=7,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ DelayFromIndexAdmissionToProcedure + Month ,
    subset = HenvisningsStatus == "Overflyttet" ,
    data = NSTEMI)

# exclude the last two months
TabNDelay <- TabNDelay[ , 1:(ncol(TabNDelay)-2)]

BarplotTable( TabNDelay )


@ 

\end{frame}



\begin{frame}[fragile]
    \frametitle{overflyttet}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay-Sykehus,fig.cap="Prosentandel NSTEMI i ventetidkategorier per henvisende sykehus. Manglende registreringer og overflyttinger fra Stavanger universitetssykehus er ekskludert. Tall fra 1.1.2013 til oktober 2016",fig.width=10,fig.height=5,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ DelayFromIndexAdmissionToProcedure + OverflyttetFraSykehus ,
    subset = (OverflyttetFraSykehus != "") ,
    data = NSTEMI )

BarplotTable( TabNDelay , sort.level = 3 , horiz = TRUE )

@ 
\end{frame}




\begin{frame}[fragile]
    \frametitle{overflyttet}
    \framesubtitle{dager fra 1. innleggelse til prosedyre}

<<Fig-R-NSTEMI-Delay-Sykehus-ReportYear,fig.cap="Prosentandel NSTEMI i ventetidkategorier per henvisende sykehus. Manglende registreringer og overflyttinger fra Stavanger universitetssykehus er ekskludert. Data for inneværende året.",fig.width=10,fig.height=5,out.width="\\textwidth">>=

TabNDelay <- xtabs(
    formula = ~ DelayFromIndexAdmissionToProcedure + OverflyttetFraSykehus ,
    subset = (OverflyttetFraSykehus != "") & (Year == ReportYear ) ,
    data = NSTEMI )

BarplotTable( TabNDelay , sort.level = 3 , horiz = TRUE )

@ 
\end{frame}


\end{tiny}
\end{document}


<<Fig,fig.cap="",fig.width=14,fig.height=7,out.width="\\textwidth">>=
@ 

<<Tab,results='asis'>>=
@ 
