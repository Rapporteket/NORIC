% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utlede_segmentStent_variabler.R
\name{utlede_segmentStent_variabler}
\alias{utlede_segmentStent_variabler}
\alias{legg_til_antall_stent}
\alias{legg_til_antall_stent_opphold}
\alias{utlede_kar_segment_stent}
\alias{utlede_kar_graft_segment_stent}
\alias{satt_inn_stent_i_lms}
\alias{legg_til_pci_per_kar}
\alias{legg_til_wireforsok_per_kar}
\title{New variables from NORIC's SementStent-table}
\usage{
legg_til_antall_stent(df_ap, df_ss)

legg_til_antall_stent_opphold(df_ap)

satt_inn_stent_i_lms(df_ap, df_ss)

utlede_kar_segment_stent(df_ss)

utlede_kar_graft_segment_stent(df_ss)

legg_til_pci_per_kar(df_ap, df_ss)

legg_til_wireforsok_per_kar(df_ap, df_ss)
}
\arguments{
\item{df_ap}{NORICS's \emph{AngioPCIVar}-table. Must contain the variables
\code{AvdRESH} and \code{ForlopsID}.}

\item{df_ss}{NORICS's \emph{SegmentStent}-table. Must contain the variables
\code{AvdRESH} and \code{ForlopsID}. Additionally, the variable
\code{StentType} is mandatory in the function \code{legg_til_antall_stent()}
and the variables \code{Segment}, \code{Graft} and \code{ProsedyreType} are
mandatory in the functions \code{utlede_kar_segment_stent()},
\code{utlede_kar_graft_segment_stent()}, \code{legg_til_pci_per_kar()} and
\code{legg_til_wireforsok_per_kar()}.}
}
\description{
Functions for creating variables based on NORIC's \emph{SegmentStent}-table
and for merging these variables into NORIC's \emph{AngioPCIVar}-table by key
variables \code{ForlopsID} and \code{AvdRESH}.
}
\details{
The function \code{legg_til_antall_stent()} counts the number of non-missing
stent-types for each procedure in \code{df_ss}. The variable
 \code{antall_stent} is then added in \code{df_ap} before \code{df_ap} is
 returned. For procedures with no entries in \code{df_ss},
 \code{antall_stent} has the value <NA>.

The function \code{legg_til_antall_stent_opphold()} groups the
procedures (primErforløp - koblet primaerforløp) by main procedure and
counts the total number of stents. If no registration in SegmentStent-table
for any procedure associated with a main procedure, NA is returned. If at
least one registration is available in SegmentStent, the sum om stents is
returned (the sum might be 0, if only other types of interventions were
 registered).

The function \code{utlede_kar_segment_stent()} groups the
\code{Segments} in \code{df_ss} into coronary arteries in the new variable
\code{kar}, then \code{df_ss} is returned from the function.

The function \code{utlede_kar_graft_segment_stent()} groups the
\code{Segments} and \code{Grafts} in \code{df_ss} into coronary arteries
and/or grafts in the new variable \code{kar_graft}, then \code{df_ss} is
returned from the function.

The function \code{satt_inn_stent_i_lms()} adds the variable
\code{satt_inn_stent_i_LMS} in table \code{df_ap}. The variable is binary
and has value \emph{ja} if at least one stent is registered in LMS for the
procedure, value \emph{nei} if 0 stents are registered in LMS and finally
 value \emph{NA} if no rows are available in \code{df_ss} for the procedure.

The function \code{legg_til_pci_per_kar()} uses the data in \code{df_ss} to
calculate 10 new variables. Variable names are prefixed by \code{PCI_} and
suffixed by level of \code{kar_graft} (p.ex.: \code{PCI_LAD}, \code{PCI_CX},
\code{PCI_CX_veneGraft}, \code{PCI_CX_arterieGraft}). The variables indicates
whether or not a PCI is performed in each \code{kar_graft}. If at least one
PCI is done in a \code{kar_graft} the value of the corresponding variable is
\emph{ja}, otherwise the value is \emph{nei}. These 10 variables are then
merged into \code{df_ap}, before \code{df_ap} is returned from the function.
For procedures where no PCI's are done on segment-level (e.g. no entries
available in \code{df_ss}), the values for the 10 new variables are <NA>.
Procedures of type \emph{wireforsoek} are not counted.


The function \code{legg_til_wireforsok_per_kar()} uses the data in
\code{df_ss} to calculate 10 new variables. Variable names are prefixed by
\code{wireforsok_} and suffixed by level of \code{kar_graft}
(p.ex.: \code{wireforsok_LAD}, \code{wireforsok_CX},
\code{wireforsok_CX_veneGraft}, \code{wireforsok_CX_arterieGraft}).
The variables indicates whether or not a wireforsøk is performed in each
\code{kar_graft}. If at least one wireforsøk is done in a \code{kar_graft}
the value of the corresponding variable is \emph{ja}, otherwise the value is
\emph{nei}. These 10 variables are then merged into \code{df_ap}, before
\code{df_ap} is returned from the function. For procedures where no
wireforsok's are done on segment-level (e.g. no entries
available in \code{df_ss}), the values for the 10 new variables are <NA>.
Only procedures of type \emph{wireforsoek} are counted.
}
\examples{
df_ap <- data.frame(ForlopsID = 1:5,
                    AvdRESH = rep(1,5))

# Legg til antall stent i df_ap
df_ss <- data.frame(
  ForlopsID = c(1, 3, 3, 3, 5, 5),
  AvdRESH = rep(1,6),
  Segment = 1:6,
  StentType = c("DES",
                "BMS", "DES", "Annet",
                NA, NA))
legg_til_antall_stent(df_ap = df_ap, df_ss = df_ss)


x <- data.frame(AvdRESH = rep(1, 13),
                OppholdsID = c(101:106, 101, 102, 102, 103, 104, 106, 50),
                antall_stent = c(0, 5, NA, 1, NA, NA,
                                 3, 1, 2, 3, NA, NA, 10))
noric::legg_til_antall_stent_opphold(x)



# Legg til kar ellerkar_graft i df_ss
df_ss <- data.frame(ForlopsID = 1:23,
                    AvdRESH = rep(1,23),
                    Segment = c(1:20, 1:3),
                    Graft=c(rep("Nei", 20), "Arteriell", "Vene", NA))
utlede_kar_segment_stent(df_ss)
utlede_kar_graft_segment_stent(df_ss)


# Legg til PCI-variabler og wireforsok-variabler per kar_graft i df_ap
df_ss <- data.frame(ForlopsID = c(1,2,3,3,3),
                    AvdRESH = rep(1,5),
                    Segment = c(1,5,10,12,13),
                    Graft = c(rep("Nei", 3),
                              rep("Arteriell", 1),
                              rep("Vene", 1)),
                    ProsedyreType = c("Ballong + Stent",
                                      "Wireforsøk",
                                      "Rotablator",
                                      "Wireforsøk",
                                      "Direktestent"))
legg_til_pci_per_kar(df_ap = df_ap, df_ss = df_ss)
legg_til_wireforsok_per_kar(df_ap = df_ap, df_ss = df_ss)
}
